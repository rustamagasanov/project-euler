# Cyclical figurate numbers
# Problem 61
# Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) numbers and are generated by the following formulae:
#
# Triangle    P3,n=n(n+1)/2   1, 3, 6, 10, 15, ...
# Square      P4,n=n^2         1, 4, 9, 16, 25, ...
# Pentagonal  P5,n=n(3n−1)/2  1, 5, 12, 22, 35, ...
# Hexagonal   P6,n=n(2n−1)    1, 6, 15, 28, 45, ...
# Heptagonal  P7,n=n(5n−3)/2  1, 7, 18, 34, 55, ...
# Octagonal   P8,n=n(3n−2)    1, 8, 21, 40, 65, ...
# The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.
#
# The set is cyclic, in that the last two digits of each number is the first two digits of the next number (including the last number with the first).
# Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is represented by a different number in the set.
# This is the only set of 4-digit numbers with this property.
# Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.

module PolygonalNumbers
  extend self

  def triangle(n)
    n * (n + 1) / 2
  end

  def square(n)
    n**2
  end

  def pentagonal(n)
    n * (3 * n - 1) / 2
  end

  def hexagonal(n)
    n * (2 * n - 1)
  end

  def heptagonal(n)
    n * (5 * n - 3) / 2
  end

  def octagonal(n)
    n * (3 * n - 2)
  end
end

triangles   = []
squares     = []
pentagonals = []

loop.with_index do |_, i|
  triangle = PolygonalNumbers.triangle(i)
  if triangle.to_s.length > 4
    break
  elsif triangle.to_s.length == 4
    triangles << triangle
  end
end

loop.with_index do |_, i|
  square = PolygonalNumbers.square(i)
  if square.to_s.length > 4
    break
  elsif square.to_s.length == 4
    squares << square
  end
end

loop.with_index do |_, i|
  pentagonal = PolygonalNumbers.pentagonal(i)
  if pentagonal.to_s.length > 4
    break
  elsif pentagonal.to_s.length == 4
    pentagonals << pentagonal
  end
end

# def cycle?(a, b)
#   (a / 100).to_s == b.to_s[2..3]
# end

def cycle?(arr)
  permutations = arr.permutation(arr.size).to_a
  permutations.each do |permutation|
    if permutation[0].to_s[2..3] == permutation[1].to_s[0..1] &&
      permutation[1].to_s[2..3] == permutation[2].to_s[0..1] &&
      permutation[2].to_s[2..3] == permutation[0].to_s[0..1]
      return true
    end
  end
  false
end

triangles.each do |triangle|
  squares.each do |square|
    pentagonals.each do |pentagonal|
      if cycle?([triangle, square, pentagonal])
        puts "#{triangle} #{square} #{pentagonal}"
      end
    end
  end
end

